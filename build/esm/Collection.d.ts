import ActiveRecord from './ActiveRecord';
import CollectionIterator from './CollectionIterator';
import HttpRequest from './Http/Request';
import Model from './Model';
import { IAttributes, ICollectionMeta, IModelRequestOptions, IModelRequestQueryParams, IPagination } from './Interfaces';
export default class Collection<GenericModel extends Model> extends ActiveRecord<Collection<GenericModel>> implements Iterable<GenericModel> {
    static paginator(collection: any): IPagination;
    static hydrate<T>(models?: Model[], options?: object): any;
    get length(): number;
    get modelId(): string;
    get pagination(): IPagination;
    atRelationship: string[];
    index: number;
    meta: ICollectionMeta;
    model: GenericModel;
    models: GenericModel[];
    protected sortKey: string;
    constructor(options?: IAttributes);
    toJSON(): object;
    fetchNext(append?: boolean): Promise<HttpRequest>;
    getEndpoint(): string;
    add(data: GenericModel[] | GenericModel | object, options?: IAttributes): Collection<GenericModel>;
    remove(model: Model[] | Model | object): Collection<GenericModel>;
    set(model: Model[] | Model | object, options?: IAttributes): Collection<GenericModel>;
    clear(): Collection<GenericModel>;
    count(): number;
    delete(attributes?: IAttributes): any;
    each(callback: any): void;
    push(model: Model[] | Model | object, options?: object): Collection<GenericModel>;
    pop(): Collection<GenericModel>;
    reset(): Collection<GenericModel>;
    unshift(model: GenericModel[] | GenericModel | object, options?: IAttributes): Collection<GenericModel>;
    shift(): Collection<GenericModel>;
    slice(...params: any): Model[];
    get(query: GenericModel | number | string): Model | undefined;
    has(obj: GenericModel | number | string): boolean;
    at(index?: number): GenericModel;
    first(): GenericModel;
    last(): GenericModel;
    next(): GenericModel | undefined;
    previous(): GenericModel | undefined;
    current(): GenericModel;
    where(attributes?: IAttributes, first?: boolean): Collection<GenericModel> | GenericModel | undefined;
    findWhere(attributes?: IAttributes): GenericModel | undefined;
    findByCid(cid: string): GenericModel | undefined;
    sort(options?: IAttributes): Collection<GenericModel>;
    pluck(attribute: string): any;
    clone(attributes?: IAttributes): any;
    values(): CollectionIterator<GenericModel>;
    keys(attributes?: IAttributes): CollectionIterator<GenericModel>;
    entries(attributes?: IAttributes): CollectionIterator<GenericModel>;
    protected _fetch(options?: IModelRequestOptions | null, queryParams?: IModelRequestQueryParams, method?: string, body?: IAttributes, headers?: IAttributes): any;
    [Symbol.iterator](): CollectionIterator;
}
